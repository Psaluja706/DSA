public class Solution {
    public static long getInversions(long a[], int n) {
        long temp[]=new long[n];
       return mergeSort(a,temp,0,n-1);
    }
     public static long mergeSort(long a[],long temp[],int l,int r)
     {
         long c=0;
         if(l<r)
         {
             int mid=(l+r)/2;
             c+=mergeSort(a,temp,l,mid);
             c+=mergeSort(a,temp,mid+1,r);
             c+=merge(a,temp,l,mid,r);
         }
         return c;
     }
     public static long merge(long a[],long temp[],int l,int mid,int r)
     {
         long c=0;
         int i=l,j=mid+1,k=l;
         while(i<=mid && j<=r)
         {
             if(a[i]<=a[j])
                 temp[k++]=a[i++];
             else
             {
                 temp[k++]=a[j++];
                 c+=(mid-i+1);
             }
         }
          while(i<=mid)
          {
             temp[k++]=a[i++];  
          }
         while(j<=r)
         {
              temp[k++]=a[j++];
         }
         for(int t=l;t<=r;t++)
         {
             a[t]=temp[t];
         }
         return c;
     }
}
